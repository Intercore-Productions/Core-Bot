*** Begin Patch
*** Update File: bot.py
@@ async def embed_command(interaction: discord.Interaction):
-    view = EmbedBuilderView(author_id=interaction.user.id, premium=premium, presets=presets)
-    await interaction.response.send_message("Create your embed:", embed=view.embed, view=view, ephemeral=True)
+    view = EmbedBuilderView(author_id=interaction.user.id, premium=premium, presets=presets)
+    await interaction.response.send_message("Create your embed:", embed=view.embed, view=view)
@@ class EmbedBuilderView(View):
-    async def load_preset(self, interaction: discord.Interaction, select: Select):
-        preset_id = select.values[0]
-        url = f"{SUPABASE_URL}/rest/v1/embed_presets?id=eq.{preset_id}"
-        resp = requests.get(url, headers=SUPABASE_HEADERS)
-        if resp.status_code == 200 and resp.json():
-            preset = resp.json()[0]
-            self.embed = discord.Embed.from_dict(json.loads(preset["embed_json"]))
-            await interaction.edit_original_response(embed=self.embed, view=self)
-        else:
-            await interaction.response.send_message("Error loading preset.", ephemeral=True)
+    async def load_preset(self, interaction: discord.Interaction, select: Select):
+        preset_id = select.values[0]
+        url = f"{SUPABASE_URL}/rest/v1/embed_presets?id=eq.{preset_id}"
+        resp = requests.get(url, headers=SUPABASE_HEADERS)
+        if resp.status_code == 200 and resp.json():
+            preset = resp.json()[0]
+            self.embed = discord.Embed.from_dict(json.loads(preset["embed_json"]))
+            await interaction.response.defer()
+            await interaction.edit_original_response(embed=self.embed, view=self)
+        else:
+            await interaction.response.send_message("Error loading preset.", ephemeral=True)
@@ class EmbedBuilderView(View):
-    @discord.ui.button(label="Send", style=discord.ButtonStyle.success, custom_id="send_embed")
-    async def send_embed(self, interaction: discord.Interaction, button: Button):
-        class ChannelModal(Modal, title="Select Channel"):
-            channel_id = TextInput(label="Channel ID", placeholder="Enter channel ID", max_length=20)
-        modal = ChannelModal()
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        try:
-            channel_id = int(modal.channel_id.value)
-            channel = interaction.guild.get_channel(channel_id)
-            if not channel or not isinstance(channel, TextChannel):
-                await interaction.followup.send("Invalid channel!", ephemeral=True)
-                return
-            await channel.send(embed=self.embed)
-            await interaction.response.send_message(f"Embed sent in <#{channel_id}>!", ephemeral=True)
-        except Exception:
-            await interaction.response.send_message("Error sending embed.", ephemeral=True)
+    @discord.ui.button(label="Send", style=discord.ButtonStyle.success, custom_id="send_embed")
+    async def send_embed(self, interaction: discord.Interaction, button: Button):
+        # Show a select menu with all text channels
+        text_channels = [c for c in interaction.guild.text_channels if c.permissions_for(interaction.user).send_messages]
+        if not text_channels:
+            await interaction.response.send_message("No available text channels to send the embed.", ephemeral=True)
+            return
+        options = [discord.SelectOption(label=ch.name, value=str(ch.id)) for ch in text_channels]
+        select = Select(placeholder="Select a channel", options=options, min_values=1, max_values=1)
+        async def select_callback(select_interaction: discord.Interaction):
+            channel_id = int(select.values[0])
+            channel = interaction.guild.get_channel(channel_id)
+            if not channel or not isinstance(channel, TextChannel):
+                await select_interaction.response.send_message("Invalid channel!", ephemeral=True)
+                return
+            await channel.send(embed=self.embed)
+            await select_interaction.response.send_message(f"Embed sent in <#{channel_id}>!")
+            await select_interaction.message.delete()
+        select.callback = select_callback
+        view = View()
+        view.add_item(select)
+        await interaction.response.send_message("Select a channel to send the embed:", view=view, ephemeral=True)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        self.embed.title = modal.title_input.value
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        self.embed.title = modal.title_input.value
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        self.embed.description = modal.desc.value
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        self.embed.description = modal.desc.value
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        try:
-            self.embed.color = discord.Color(int(modal.color_input.value.replace('#',''), 16))
-        except Exception:
-            await interaction.followup.send("Invalid color! Usa formato HEX.", ephemeral=True)
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        try:
+            self.embed.color = discord.Color(int(modal.color_input.value.replace('#',''), 16))
+        except Exception:
+            await interaction.followup.send("Invalid color! Usa formato HEX.", ephemeral=True)
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        icon_url = modal.icon_url_input.value.strip()
-        if icon_url:
-            self.embed.set_author(name=modal.author_input.value, icon_url=icon_url)
-        else:
-            self.embed.set_author(name=modal.author_input.value)
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        icon_url = modal.icon_url_input.value.strip()
+        if icon_url:
+            self.embed.set_author(name=modal.author_input.value, icon_url=icon_url)
+        else:
+            self.embed.set_author(name=modal.author_input.value)
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        icon_url = modal.icon_url_input.value.strip()
-        if icon_url:
-            self.embed.set_footer(text=modal.footer_input.value, icon_url=icon_url)
-        else:
-            self.embed.set_footer(text=modal.footer_input.value)
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        icon_url = modal.icon_url_input.value.strip()
+        if icon_url:
+            self.embed.set_footer(text=modal.footer_input.value, icon_url=icon_url)
+        else:
+            self.embed.set_footer(text=modal.footer_input.value)
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        self.embed.set_image(url=modal.url.value)
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        self.embed.set_image(url=modal.url.value)
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        self.embed.set_thumbnail(url=modal.url.value)
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        self.embed.set_thumbnail(url=modal.url.value)
+        await interaction.edit_original_response(embed=self.embed, view=self)
@@ class EmbedBuilderView(View):
-        await interaction.response.send_modal(modal)
-        await modal.wait()
-        self.embed.add_field(name=modal.name.value, value=modal.value.value, inline=(modal.inline.value.lower() == "yes" if modal.inline.value else False))
-        await interaction.edit_original_response(embed=self.embed, view=self)
+        await interaction.response.send_modal(modal)
+        await modal.wait()
+        await interaction.response.defer()
+        self.embed.add_field(name=modal.name.value, value=modal.value.value, inline=(modal.inline.value.lower() == "yes" if modal.inline.value else False))
+        await interaction.edit_original_response(embed=self.embed, view=self)
*** End Patch
